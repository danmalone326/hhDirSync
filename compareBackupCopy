#!/usr/bin/python3
import sys
import os.path
import shutil
import filecmp
import subprocess
import json
import ldif
import getopt

srcFile=""
destFile=""
percent=0
countFile=""
nonZero=False
updatesOnly=False

def usage():
    print("usage: " + os.path.basename(sys.argv[0]) + " [-h] -s <srcFile> -d <destFile> -p <0-100> [-c <countFile>] [-n]")
    print("     src-file must exist")
    print("     0-100 is percent change allowed for sanity check, 0 means no sanity check")
    sys.exit(1)

def readParameters():
    global srcFile
    global destFile
    global percent
    global countFile
    global nonZero
    global updatesOnly

    percentStr = ""

    try:
        opts, args = getopt.getopt(sys.argv[1:],"s:d:p:c:nhu",["srcFile=","destFile=","percent=","countFile=","nonZero","help","updatesOnly"])
    except getopt.GetoptError as err:
        print(err)  # will print something like "option -a not recognized"
        usage()
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
        elif opt in ("-s", "--srcFile"):
            srcFile = arg
        elif opt in ("-d", "--destFile"):
            destFile = arg
        elif opt in ("-p", "--percent"):
            percentStr = arg
            if ((not percentStr.isnumeric()) or (int(percentStr) < 0) or (int(percentStr) > 100)):
                usage()
            percent = int(percentStr)
        elif opt in ("-c", "--countFile"):
            countFile = arg
        elif opt in ("-n", "--nonZero"):
            nonZero = True
        elif opt in ("-u", "--updatesOnly"):
            updatesOnly = True
    
    if (not (srcFile and destFile and percentStr)):
        usage()

    if (not (countFile)):
        countFile=destFile


def doCopy(srcFile, destFile):
    shutil.copy2(srcFile,destFile)

def doRotate(destFile):
    proc = subprocess.run(["/usr/bin/savelog",destFile], capture_output=True, text=True)
    if (proc.returncode != 0):
        print(proc.stderr)

def recordCountLdif(file):
    result=0
    proc = subprocess.run(["/usr/bin/grep","-c","^dn: ",file], capture_output=True, text=True)
    if (proc.returncode == 0):
        result = int(proc.stdout)
    return result

def recordCountJson(file):
    result=0
    with open(file,'r') as f:
        result = len(json.load(f))
    return result

def recordCount(file):
    ext=os.path.splitext(file)[1]
    if (ext == ".json"):
        return recordCountJson(file)
    elif (ext == ".ldif"):
        return recordCountLdif(file)


def passSanityCheck(newFile, currentFile, percent):
    global updatesOnly
    
    result=False
    if (percent == 0):
        result=True
    else:
        newLength = recordCount(newFile)
        currentLength = recordCount(currentFile)
        if(currentLength==0 and percent==100):
            result==True
        elif (updatesOnly):
            result=(newLength/currentLength) < (percent/100)
        else:
            result=(abs(newLength - currentLength)/currentLength) < (percent/100)
    return result

#
# main
#

readParameters()

if (not os.path.isfile(srcFile)):
    print(srcFile + " does not exist.")
    usage()

if (not os.path.isfile(destFile)):
    doCopy(srcFile, destFile)

if (nonZero and (recordCount(srcFile) == 0)):
    pass
elif ((not nonZero) and (filecmp.cmp(srcFile, destFile, shallow = False))):  # true means files are the same
    pass
else:
    if (passSanityCheck(srcFile, countFile, percent)):
        doRotate(destFile)
        doCopy(srcFile,destFile)
    else:
        sys.stderr.write(srcFile + " did not pass sanity check.\n")

